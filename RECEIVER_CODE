const int device1 = 2; //device1 to Arduino pin 2
const int device2 = 3; //device2 to Arduino pin 3
const int device3 = 4; //device3 to Arduino pin 4
const int device4 = 5; //device4 to Arduino pin 5
//Variables
bool started= false;//True: Message is strated
bool ended  = false;//True: Message is finished 
char incomingByte ; //Variable to store the incoming byte
char msg[3];    //Message 
byte index; //Index of array

void setup() {
  //Start the serial communication
  Serial.begin(9600); //Baud rate must be the same as is on xBee module
// setting the output pins
  pinMode(device1, OUTPUT); 
  pinMode(device2, OUTPUT);
  pinMode(device3, OUTPUT);
  pinMode(device4, OUTPUT);
  
}

void loop() {
  
  while (Serial.available()>0){ //starting the serial communication
    //Read the incoming byte
    incomingByte = Serial.read();
    //Start the message when the '<' symbol is received
    if(incomingByte == '<')
    {
     started = true;
     index = 0;
     msg[index] = '\0'; // Throw away any incomplete packet
   }
   //End the message when the '>' symbol is received
   else if(incomingByte == '>')
   {
     ended = true;
     break; // Done reading - exit from while loop!
   }
   //Read the message!
   else
   {
     if(index < 4) // Make sure there is room
     {
       msg[index] = incomingByte; // Add char to array
       index++;
       msg[index] = '\0'; // Add NULL to end
     }
   }
 }
 
 if(started && ended)
 {
   int value = atoi(msg); //converting the msg from string format to integer format
   if(value == 1){
   analogWrite(device1, HIGH);
   delay(3000);
   analogWrite(device1, LOW);
   }
   if(value == 2){
   analogWrite(device2, HIGH);
   delay(3000);
   analogWrite(device2, LOW);
   }
   if(value == 3){
   analogWrite(device3, HIGH);
   delay(3000);
   analogWrite(device3, LOW);
   }
   if(value == 4){
   analogWrite(device4, HIGH);
   delay(3000);
   analogWrite(device4, LOW);
   }
   //Serial.println(value); //Only for debugging
   index = 0;
   msg[index] = '\0';
   started = false;
   ended = false;
 }
}
